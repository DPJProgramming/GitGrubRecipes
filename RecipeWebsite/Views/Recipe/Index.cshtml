@using System.Data;
@using Newtonsoft.Json;

@model IEnumerable<RecipeWebsite.Models.Recipe>

@{
    ViewData["Title"] = "Index";
}

<h1 class="text-center bottom_border">Welcome To GitGrub</h1>

@if (!User.Identity.IsAuthenticated)
{
    <h4 class="text-center">--Sign in to Git Started--</h4>
}

<label>Sort By</label>
<select title="sort-dropdown" id="sorting" class="btn btn-secondary" onchange="sortRecipes()">
    <option value="ReverseDate">Oldest</option>
    <option value="Date">Newest</option>
    <option value="Name">Name</option>
    <option value="Category">Category</option>
    <option value="Rating">Rating</option>
</select>
<br />
<br />

<!--Recipe rows in table are populated by javascript-->
<table id="show-recipes">
    <tbody>       
    </tbody>
</table>

@{
    // Serialize Model using custom JsonSerializerSettings to preserve property casing
    var serializerSettings = new Newtonsoft.Json.JsonSerializerSettings {
                ContractResolver = new Newtonsoft.Json.Serialization.DefaultContractResolver {
                    NamingStrategy = new Newtonsoft.Json.Serialization.DefaultNamingStrategy()
                },
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            };

    // Serialize the Model using custom settings
    var serializedModel = Newtonsoft.Json.JsonConvert.SerializeObject(Model, serializerSettings);
}

@section Scripts{
    <script>
        var sortedRecipes = @Html.Raw(serializedModel);

        // Automatically run createRecipeRows() when the page loads
        document.addEventListener("DOMContentLoaded", function () {
            createRecipeRows(sortedRecipes);
        });

        function sortRecipes() {
            var sortingOption = document.getElementById("sorting").value;
            var sorted = sortedRecipes.slice(0);

            switch (sortingOption) {
                case "Name":
                    sorted.sort(function (a, b) {
                        return a.Title.localeCompare(b.Title);
                    });
                    break;
                case "Date":
                    sorted.sort(function (a, b) {
                        return new Date(b.DateCreated) - new Date(a.DateCreated);
                    });
                    break;
                case "ReverseDate":
                    sorted.sort(function (a, b) {
                        //console.log(new Date(a.DateCreated));
                        return new Date(a.DateCreated) - new Date(b.DateCreated);
                    });
                    break;
                case "Category":
                    sorted.sort(function (a, b) { 
                        return a.Category.localeCompare(b.Category);
                    });
                    break;
                case "Rating":
                    sorted.sort(function (a, b) {
                        return b.Rating - a.Rating;
                    });
                    break;
                default:
                    // Default sorting option or "Sort By" option selected
                    sorted.sort(function (a, b) {
                        return a.Title.localeCompare(b.Title);
                    });
                    break;
            }

            createRecipeRows(sorted);
        }

        function createRecipeRows(recipes) {
            var tableBody = document.querySelector("#show-recipes tbody");
            tableBody.innerHTML = "";

            recipes.forEach(function (item) {
                var row = document.createElement("tr");
                row.classList.add("mx-auto", "hover-card", "recipe-row");

                var url = '@Url.Action("Details", "Recipe")?id=' + item.RecipeId;
                row.setAttribute("data-href", url);

                var imgCell = document.createElement("td");
                var imgDiv = document.createElement("div");
                imgDiv.style.height = "100px";
                imgDiv.style.overflow = "hidden";
                var img = document.createElement("img");
                img.onerror = function () {
                    img.src = "/lib/images/ImgPlaceHolder.jpg";
                };
                img.src = "./img/" + item.ImageUrl;
                img.alt = "Recipe-Picture";
                img.width = "100";
                imgDiv.appendChild(img);
                imgCell.appendChild(imgDiv);
                row.appendChild(imgCell);

                var titleCell = document.createElement("td");
                var title = document.createElement("h5");
                title.textContent = item.Title;
                titleCell.appendChild(title);
                row.appendChild(titleCell);

                var descriptionCell = document.createElement("td");
                var description = document.createElement("p");
                description.textContent = item.Description;
                descriptionCell.appendChild(description);
                row.appendChild(descriptionCell);

                var ratingCell = document.createElement("td");
                var rating = document.createElement("p");
                if (item.Rating !== undefined) {                   
                    rating.textContent = item.Rating;
                }
                else{
                    rating.textContent = "No Ratings Yet";
                }
                ratingCell.appendChild(rating);
                row.appendChild(ratingCell);

                tableBody.appendChild(row);
            });
            addRecipeClick();
        };

        function addRecipeClick() {
            const recipeRows = document.querySelectorAll(".recipe-row");
            recipeRows.forEach(recipeRow => {
                recipeRow.addEventListener("click", function () {
                    window.location = recipeRow.dataset.href;
                });
            });
        };
    </script>
}